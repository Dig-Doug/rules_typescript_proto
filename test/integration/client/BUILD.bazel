load("@npm_bazel_rollup//:index.bzl", "rollup_bundle")
load("@npm//@babel/cli:index.bzl", "babel")
load("@npm_bazel_terser//:index.bzl", "terser_minified")
load("@npm//history-server:index.bzl", "history_server")
load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("@npm_angular_bazel//:index.bzl", "ng_module")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")
load("@npm_bazel_typescript//:index.bzl", "ts_config", "ts_devserver", "ts_library")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")

package(
    default_visibility = ["//test/integration:__subpackages__"],
)

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        ":rxjs_shims.js",
        "@npm//:node_modules/rxjs/bundles/rxjs.umd.js",
    ],
)

ng_module(
    name = "app",
    srcs = [
        "app.component.ts",
        "app.module.ts",
    ],
    assets = [
        "app.component.html",
    ],
    tsconfig = "//:tsconfig",
    deps = [
        "//test/integration/proto:service_ts_proto",
        "@npm//@angular/animations",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser",
        "@npm//@improbable-eng/grpc-web",
    ],
)

ng_module(
    name = "main",
    srcs = [
        "main.dev.ts",
        "main.prod.ts",
    ],
    tsconfig = "//:tsconfig",
    deps = [
        ":app",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser",
    ],
)

sass_binary(
    name = "index-styles",
    src = "index.scss",
)

_ASSETS = [
    ":index.css",
    "@npm//:node_modules/zone.js/dist/zone.min.js",
]

html_insert_assets(
    name = "inject_scripts_for_dev",
    outs = ["index.html"],
    args = [
        "--html=$(location :index.dev.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(location %s)" % s for s in _ASSETS] + [
        # This file doesn't exist during the build, but will be served by ts_devserver
        "_/ts_scripts.js",
    ],
    data = [":index.dev.html"] + _ASSETS,
)

ts_devserver(
    name = "devserver",
    entry_module = "rules_typescript_proto/test/integration/client/main.dev",
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        ":rxjs_umd_modules",
        ":require.config.js",
    ],
    static_files = _ASSETS + [
        ":inject_scripts_for_dev",
        "@npm//:node_modules/@improbable-eng/grpc-web/dist/grpc-web-client.umd.js",
        "@npm//:node_modules/browser-headers/dist/browser-headers.umd.js",
        "@npm//google-protobuf:google-protobuf__umd",
    ],
    deps = [":main"],
)

rollup_bundle(
    name = "bundle-es2015",
    config_file = "rollup.config.js",
    entry_points = {
        ":main.prod.ts": "index",
    },
    output_dir = True,
    deps = [
        ":main",
        "@npm//@improbable-eng/grpc-web",
        "@npm//@rollup/plugin-commonjs",
        "@npm//@rollup/plugin-node-resolve",
    ],
)

babel(
    name = "bundle-es5",
    args = [
        "$(location :bundle-es2015)",
        "--no-babelrc",
        #"--source-maps",
        "--presets=@babel/preset-env",
        "--out-dir",
        "$(@D)",
    ],
    data = [
        ":bundle-es2015",
        "@npm//@babel/preset-env",
    ],
    output_dir = True,
)

terser_minified(
    name = "bundle-es2015.min",
    src = ":bundle-es2015",
)

terser_minified(
    name = "bundle-es5.min",
    src = ":bundle-es5",
)

html_insert_assets(
    name = "inject_scripts_for_prod",
    # we can't output "src/example/index.html" since that collides with the devmode file.
    # pkg_web rule will re-root paths that start with _{name} by default
    # so we output "_prodapp/src/example/index.html" so that it is mapped to
    # `example/index.html` in the web package.
    outs = ["_prodapp/test/integration/client/index.html"],
    args = [
        "--html=$(location :index.prod.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(location %s)" % s for s in _ASSETS],
    data = [":index.prod.html"] + _ASSETS,
)

pkg_web(
    name = "prodapp",
    # do not sort
    srcs = _ASSETS + [
        ":bundle-es2015.min",
        ":bundle-es5.min",
        ":inject_scripts_for_prod",
        # Include polyfills that will be requested by old browsers
        "@npm//:node_modules/systemjs/dist/system.js",
        "@npm//:node_modules/core-js/client/core.min.js",
    ],
    additional_root_paths = [
        "npm/node_modules/core-js/client",
        "npm/node_modules/systemjs/dist",
    ],
)

history_server(
    name = "prodserver",
    data = [":prodapp"],
    templated_args = [
        "-a",
        "test/integration/client/prodapp",
    ],
)
